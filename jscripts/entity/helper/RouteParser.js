/**
* @module vd.entity.helper
* @license <a href = "http://vatgm.codeplex.com/wikipage?title=Legal">Project site</a>
*/
namespace.module('vd.entity.helper', function (exports) {

    /** 
    * Parse route formats, e.g. VATroute or flightplan.
    * @constructor
    */
    exports.RouteParser = function () {
        // code
    };

    /**
    * Parse a route generated by VATroute.
    * @param {String} route route as generate by VATroute
    * @see <a href="http://www.vatroute.net/">VATroute</a>
    */
    exports.RouteParser.parseVatRoute = function (route) {
        var waypoints = new Array();
        if (String.isNullOrEmpty(route)) return waypoints;
        var lines = route.split("\n");
        var wpNo = 1;
        var name, airway, lat, lng, distance, course, frequency, lineParts, test;
        for (var l = 0, len = lines.length; l < len; l++) {
            var line = lines[l];
            if (String.isNullOrEmpty(line)) continue;
            if (String.isNullOrEmpty(line) || line.startsWith("==") || line.startsWith("--")) continue;
            var sepBar = line.indexOf("|") > 0;
            if (sepBar) {
                // separated by | -> this is easy to parse
                // SUBAX |  51.865834 |  19.125000 |   31,8 NM | N869  |   INT   |   123.3  |  251
                lineParts = line.split("|");
                if (Array.isNullOrEmpty(lineParts)) continue;
                name = lineParts[0].trim();
                lat = String.toNumber(lineParts[1].trim(), null);
                if (String.isNullOrEmpty(lat)) continue; // invalid line
                lng = String.toNumber(lineParts[2].trim(), null);
                if (String.isNullOrEmpty(lng)) continue; // invalid line

                // set values which need specific treatment
                distance = lineParts[3].replace(" NM", "");
                if (!String.isNullOrEmpty(distance)) distance = String.toNumber(distance.replace(",", "."), null);

                // optional parts
                if (lineParts.length > 4)
                    airway = lineParts[4].trim();
                else
                    airway = null;
                
                if (lineParts.length > 5)
                    marker = lineParts[5].trim().replace("VOR DME", "VORDME");
                else
                    marker = null;

                if (lineParts.length > 6)
                    frequency = String.toNumber(lineParts[6].trim().replace(",", "."), null);
                else
                    frequency = null;

                if (lineParts.length > 7)
                    course = String.toNumber(lineParts[7].trim().replace(",", "."), null);
                else
                    course = null;
            
            } else {
                // just separated by space, a little tricky to find all fields
                line = line.tabToSpace().cleanUp();
                line = line.replace("VOR DME", "VORDME");
                lineParts = line.split(" ");

                // the parts certainly being there
                if (Array.isNullOrEmpty(lineParts)) continue;
                name = lineParts[0].trim();
                lat = String.toNumber(lineParts[1].trim(), null);
                if (String.isNullOrEmpty(lat)) continue; // invalid line
                lng = String.toNumber(lineParts[2].trim(), null);
                if (String.isNullOrEmpty(lng)) continue; // invalid line
                distance = String.toNumber(lineParts[3].trim().replace(",", "."), null);
                airway = null;
                if (lineParts.length > 5) {
                    test = lineParts[5].trim(); // candidate, not yet 100% sure what it is
                    if (vd.entity.helper.RouteParser._vatRouteIsMarker(test)) {
                        marker = test;
                    } else {
                        airway = test;
                        if (lineParts.length > 6) {
                            marker = lineParts[6].trim();
                        } else {
                            marker = null;
                        }
                    }
                }

                // check if last part is course
                course = lineParts[lineParts.length - 1]; // potential value
                course = course.endsWith("°") ? String.toNumber(course.replace("°", ""), null) : null;

                // check if the elemnt before is possibly the frequency
                frequency = Object.isNullOrUndefined(course) ? lineParts[lineParts.length - 1] : lineParts[lineParts.length - 2];
                frequency = String.toNumber(frequency, null);
            }

            // post fixes
            if (marker == "NDB" && Object.isNumber(frequency)) frequency = frequency / 1000; // kHz instead MHz

            // seems to be a valid waypoint
            var wp = new vd.entity.helper.Waypoint({
                type: vd.entity.helper.WaypointSettings.TypeRoute,
                latitude: lat,
                longitude: lng,
                number: wpNo++,
                distance: distance,
                course: course,
                frequency: frequency,
                name: name,
                airway: airway,
                marker: vd.entity.helper.RouteParser._vatRouteTypeToMarker(marker)
            }
            );
            waypoints.push(wp);
        }
        return waypoints;
    };

    /**
    * Convert a waypoint type from VATroute to the waypoint type.
    * @return {String}
    * @private
    */
    exports.RouteParser._vatRouteTypeToMarker = function (type) {
        if (String.isNullOrEmpty(type)) return null;
        var t = type.trim().toUpperCase();
        if (t == "NDB") return vd.entity.helper.WaypointSettings.MarkerNdb;
        if (t == "VORDME" || t == "VOR DME") return vd.entity.helper.WaypointSettings.MarkerVorDme;
        if (t.startsWith("VOR")) return vd.entity.helper.WaypointSettings.MarkerVor;
        return vd.entity.helper.WaypointSettings.MarkerDirect;
    };

    /**
    * Is this a possible marker string?
    * @return {Boolean}
    * @private
    */
    exports.RouteParser._vatRouteIsMarker = function (marker) {
        if (String.isNullOrEmpty(marker)) return false;
        var t = marker.toUpperCase();
        return t == "NDB" || t == "VOR" || t == "VOR DME" || t == "VORDME" || t == "APT" || t == "INT" || t == "DCT";
    };

    /**
    * Load some demo data generated by VATroute.
    * @return {String}
    */
    exports.RouteParser.vatRouteDemoData = function () {
        var xmlhttp = new XMLHttpRequest();
        var noOfFiles = 5;
        var no = (Math.floor(Math.random() * noOfFiles) + 1).toString().leading(2, "0");
        var dataFile = vd.util.UtilsWeb.replaceCurrentPage("data/VATRoute" + no + ".txt");
        xmlhttp.open("GET", dataFile, false);
        xmlhttp.send();
        var data = null;
        if (xmlhttp.status == 200) {
            data = xmlhttp.responseText;
        }
        return data;
    };
});