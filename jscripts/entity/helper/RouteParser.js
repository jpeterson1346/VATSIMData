/**
* @module vd.entity.helper
* @license <a href = "http://vatgm.codeplex.com/wikipage?title=Legal">Project site</a>
*/
namespace.module('vd.entity.helper', function (exports) {

    /** 
    * Parse route formats, e.g. VATroute or flightplan.
    * @constructor
    */
    exports.RouteParser = function () {
        // code
    };

    /**
    * Parse a route generated by VATroute.
    * @see <a href="http://www.vatroute.net/">VATroute</a>
    */
    exports.RouteParser.parseVatRoute = function (route) {
        var waypoints = new Array();
        if (String.isNullOrEmpty(route)) return waypoints;
        var lines = route.split("\n");
        var wpNo = 1;
        for (var l = 0, len = lines.length; l < len; l++) {
            var line = lines[l].cleanUp();
            if (String.isNullOrEmpty(line) || line.startsWith("==") || line.startsWith("--")) continue;

            // SUBAX |  51.865834 |  19.125000 |   31,8 NM | N869  |   INT   |   ---   |  251  
            var lineParts = (line.indexOf("|") > 0) ? line.split("|") : line.split(" ");
            if (Array.isNullOrEmpty(lineParts)) continue;
            var lat = String.toNumber(lineParts[1], null);
            if (String.isNullOrEmpty(lat)) continue; // invalid line
            var lng = String.toNumber(lineParts[2], null);
            if (String.isNullOrEmpty(lng)) continue; // invalid line

            // seems to be a valid waypoint
            var wp = new vd.entity.helper.Waypoint({
                type: vd.entity.helper.WaypointSettings.TypeRoute,
                latitude: lat,
                longitude: lng,
                number: wpNo++,
                name: lineParts[0].trim(),
                airway: lineParts[4].trim(),
                marker: vd.entity.helper.RouteParser._vatRouteTypeToMarker(lineParts[5])
            }
            );
            waypoints.push(wp);
        }
        return waypoints;
    };

    /**
    * Convert a waypoint type from VATroute to the waypoint type.
    * @return {String}
    * @private
    */
    exports.RouteParser._vatRouteTypeToMarker = function (type) {
        if (String.isNullOrEmpty(type)) return null;
        var t = type.trim().toUpperCase();
        if (t == "NDB") return vd.entity.helper.WaypointSettings.MarkerNdb;
        if (t.startsWith("VOR")) return vd.entity.helper.WaypointSettings.MarkerVor;
        return null;
    };

    /**
    * Load some demo data generated by VATroute.
    * @return {String}
    */
    exports.RouteParser.vatRouteDemoData = function () {
        var xmlhttp = new XMLHttpRequest();
        var no = (Math.floor(Math.random() * 3) + 1).toString().leading(2, "0");
        var dataFile = vd.util.UtilsWeb.replaceCurrentPage("data/VATRoute" + no + ".txt");
        xmlhttp.open("GET", dataFile, false);
        xmlhttp.send();
        var data = null;
        if (xmlhttp.status == 200) {
            data = xmlhttp.responseText;
        }
        return data;
    };
});